     1                                  ; stack.asm
     2                                  extern printf
     3                                  section .data
     4 00000000 414243444500                strng       db  "ABCDE",    0
     5                                      strngLen    equ $ - strng - 1
     6 00000006 546865206F72696769-         fmt1        db  "The original string: %s",  10, 0
     6 0000000F 6E616C20737472696E-
     6 00000018 673A2025730A00     
     7 0000001F 546865207265766572-         fmt2        db  "The reversed string: %s",  10, 0
     7 00000028 73656420737472696E-
     7 00000031 673A2025730A00     
     8                                  section .bss
     9                                  section .text
    10                                      global  main
    11                                  main:
    12 00000000 55                          push    rbp
    13 00000001 4889E5                      mov     rbp,    rsp
    14                                      ; 打印原始字符串
    15 00000004 48BF-                       mov     rdi,    fmt1
    15 00000006 [0600000000000000] 
    16 0000000E 48BE-                       mov     rsi,    strng
    16 00000010 [0000000000000000] 
    17 00000018 B800000000                  mov     rax,    0
    18 0000001D E8(00000000)                call    printf
    19                                      ; 将字符串逐个字符地压入堆栈
    20 00000022 4831C0                      xor     rax,    rax
    21 00000025 48BB-                       mov     rbx,    strng
    21 00000027 [0000000000000000] 
    22 0000002F B905000000                  mov     rcx,    strngLen                    ; rcx为循环计数器
    23 00000034 41BC00000000                mov     r12,    0                           ; 使用r12作为指针
    24                                      pushLoop:
    25 0000003A 428A0423                        mov     al,     byte [rbx + r12]        ; 把字符移到rax
    26 0000003E 50                              push    rax
    27 0000003F 49FFC4                          inc     r12
    28 00000042 E2F6                            loop    pushLoop
    29                                      ; 将字符串从堆栈中逐个字符地弹出
    30                                      ; 这将反转原始字符串
    31 00000044 48BB-                       mov     rbx,    strng
    31 00000046 [0000000000000000] 
    32 0000004E B905000000                  mov     rcx,    strngLen
    33 00000053 41BC00000000                mov     r12,    0
    34                                      popLoop:
    35 00000059 58                              pop     rax
    36 0000005A 42880423                        mov     byte [rbx + r12],   al
    37 0000005E 49FFC4                          inc     r12
    38 00000061 E2F6                            loop    popLoop
    39                                          ; mov     byte [rbx + r12],   0           ; 使用0终止字符串
    40                                      ; 打印反转后的字符串
    41 00000063 48BF-                       mov     rdi,    fmt2
    41 00000065 [1F00000000000000] 
    42 0000006D 48BE-                       mov     rsi,    strng
    42 0000006F [0000000000000000] 
    43 00000077 B800000000                  mov     rax,    0
    44 0000007C E8(00000000)                call    printf
    45                                  
    46 00000081 4889EC                      mov     rsp,    rbp
    47 00000084 5D                          pop     rbp
    48 00000085 C3                          ret
